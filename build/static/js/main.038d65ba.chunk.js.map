{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API_URL","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","url","objectArray","onChangeMessage","bind","assertThisInitialized","onChangeURL","onSubmit","getAllMessages","sendMessage","e","setState","target","value","preventDefault","_this2","object","imageURL","fetch","method","body","JSON","stringify","headers","content-type","then","response","json","result","_this3","res","console","log","react_default","a","createElement","className","htmlFor","onChange","rows","type","map","key","_id","role","alt","src","created","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.038d65ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n// const API_URL='https://message-board-9891.herokuapp.com/messages';\n// const API_URL='http://localhost:5001/messages';\nconst API_URL='https://shielded-sea-82510.herokuapp.com/messages';\nclass App extends Component {\n\n  \tconstructor(props){\n  \t\tsuper(props);\n\t  \t// this.API_URL='http://localhost:5001';\n         this.state={\n  \t  \t\tmessage:'',\n  \t  \t\turl:'',\n  \t  \t\tobjectArray:[]\n\n\t  \t};\n  \t\tthis.onChangeMessage=this.onChangeMessage.bind(this);\n  \t\tthis.onChangeURL=this.onChangeURL.bind(this);\n  \t\tthis.onSubmit=this.onSubmit.bind(this);\n  \t\tthis.getAllMessages=this.getAllMessages.bind(this);\n  \t\tthis.sendMessage=this.sendMessage.bind(this);\n\n  \t}\n\n    componentDidMount(){\n      this.getAllMessages();\n    }\n\n  \tonChangeMessage(e){\n  \t\tthis.setState({\n  \t\t\tmessage:e.target.value,\n  \t\t});\n  \t}\n\n  \tonChangeURL(e){\n  \t\tthis.setState({\n  \t\t\turl:e.target.value,\n  \t\t});\n  \t}\n\n  \tonSubmit(e){\n  \t\te.preventDefault();\n  \t\tthis.sendMessage();\n  \t}\n\n  \tsendMessage(){\n      const object={\n        message:this.state.message,\n        imageURL:this.state.url\n      }\n  \t\tfetch(API_URL,{\n        method:\"POST\",\n        body:JSON.stringify(object),\n        headers:{\n          'content-type':'application/json'\n        }\n      }).then(response=>response.json())\n        .then(result=>{\n          this.getAllMessages();\n          this.setState({\n            message:'',\n            url:''\n          })\n        });\n  \t}\n\n  \tgetAllMessages(){\n  \t\tfetch(API_URL).then(res=>res.json())\n  \t\t\t.then(result=>{\n          this.setState({\n            objectArray:result\n          });\n          console.log(this.state.objectArray);\n  \t\t\t});\n  \t}\n\n\n\n\n  render() {\n\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.onSubmit}>\n    \t\t\t\n      \t\t\t<div className=\"form-group\">\n      \t\t\t\t<label htmlFor=\"message\">\n      \t\t\t\tEnter a message</label>\n      \t\t\t\t<textarea value={this.state.message}\n      \t\t\t\tonChange={this.onChangeMessage}\n      \t\t\t\tclassName=\"form-control\"  rows=\"3\" />\n      \t\t\t</div>\n    \n      \t\t\t<div className=\"form-group\">\n      \t\t\t\t<label htmlFor=\"imageURL\">\n      \t\t\t\tImage URL</label>\n      \t\t\t\t<input type=\"text\" \n      \t\t\t\tonChange={this.onChangeURL}\n      \t\t\t\tclassName=\"form-control\"\n              value={this.state.url}\n      \t\t\t\t/>\n      \t\t\t</div>\n\n      \t\t\t<button className=\"btn btn-outline-success\">submit</button>\n\n    \t\t</form>\n\n\n        { this.state.objectArray.map((object)=>(\n           \n           <div key={object._id} className=\"alert alert-primary\" role=\"alert\">\n            <img alt=\"can't loaded\" className=\"img \" src={object.imageURL}/>\n            <h2 className=\"\">{object.message}</h2>\n            <small>{object.created}</small>\n           </div>\n        \n        ))}\n    \n\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}